import sqlalchemy
from alpha_vantage.timeseries import TimeSeries
from StaticData import SYMBOLS_LIST, batchSymbolString
import pandas as pd
import time
#ALPHAVANTAGE CONFIG
ts = TimeSeries(key='392PM7H6LAUQ50C3',output_format='pandas', indexing_type='date')

TABLE_NAME = "python_market_data_test"
TABLE_NAME_US_EQUITIES = "us_equities_ts_test"
# Get json object with the intraday data and another with  the call's metadata

#Session = sqlalchemy.sessionmaker()
engine = sqlalchemy.create_engine("mssql+pyodbc://root:password123@mssql.cwszdow2gxto.eu-west-1.rds.amazonaws.com/python_market_data_test?driver=SQL+Server",paramstyle=None)
connection = engine.connect()


#Session.configure(bind=engine)
#session = Session()

################# END CONFIG #######################################################################################################################

def pushToDb():
    df, meta_data = ts.get_intraday(SYMBOL_NAME, outputsize='full')
    df['symbol']=SYMBOL_NAME
    print(df)
    print(df.columns)
    #print("INDEX")
    #print(df.index)
    #print(meta_data)
    df.rename(columns=
                    { 
                        '1. open':'open',
                        '2. high':'high',
                        '3. low':'low',
                        '4. close':'close',
                        '5. volume':'volume'
                    }, 
                    inplace=True)
    print('appending...')
    df.to_sql(TABLE_NAME, engine, if_exists='append')

def getBatch():
    df, meta_data = ts.get_batch_stock_quotes(batchSymbolString())
    df.rename(columns=
                    { 
                        '1. symbol':'symbol',
                        '2. price':'price',
                        '3. volume':'volume',
                        '4. timestamp':'timestamp',
                    }, 
                    inplace=True)

    print(df)
    print('appending...')
    df.to_sql(TABLE_NAME_US_EQUITIES, engine, if_exists='append')

    
def readFromDb():
    print('reading...')
    metadata = sqlalchemy.MetaData()
    dbTable = sqlalchemy.Table(TABLE_NAME, metadata, autoload=True, autoload_with=engine)
    #print(readDb)
    #Equivalent to 'SELECT * FROM census'
    query = sqlalchemy.select([dbTable])

    ResultProxy = connection.execute(query)

    ResultSet = ResultProxy.fetchall()
    print(ResultSet)
    print(len(ResultSet))

def alphatest():
    list_of_lists = []
    df = pd.DataFrame()
 
    for symbols in SYMBOLS_LIST:
        print(symbols)
        df, meta_data = ts.get_intraday(symbols, outputsize='full')
        list_of_lists.append(df)
        time.sleep(12)
        print('list len') 
        print(len(list_of_lists))
       
    #for symbols in SYMBOLS_LIST:
    #    list2 = ['2','3','4']
     #   list_of_lists.append(list2)
    df = df.append(pd.DataFrame(list_of_lists))
    print(df)
    print(df.size)
    df.to_sql(TABLE_NAME, engine, if_exists='replace')
